#now for each user, use the user_to_index_full and find the most similair users by omitting that index across the
#sim_matrix



#collaboritive filtering idea
#data structures:
#need a user to movies to ratings dictionary (done) (only needed for train data)
#need a ordered set of all movies (done) (only needed for train data)

#need to transform it into a user to list of all movies with user ratings or otherwise filled in ratings with sutiable average
#(the list needs to be in a consistent order across users)
#to fill in the averages we need a movie to average rating dictionary
#(note: if no other user has rated the movie then fill it in with the overall movie average)
#standardize the data row wise (why not columnwise???)
#filter the users that have rated the movie to predict
#then use cossine similairity on this set to find the most similair user the the chosen user
#ignore the movie rating to predict with the cossine similarity function

#Note: this is an expensive task and the number of users may have to be truncated before running



#ideas: 
#idea1: 
#collaborative filtering:
#https://towardsdatascience.com/predict-movie-ratings-with-user-based-collaborative-filtering-392304b988af
#https://www.geeksforgeeks.org/user-based-collaborative-filtering/#
#https://www.youtube.com/watch?v=3ecNC-So0r4&ab_channel=CodeHeroku
#idea2: 
#note: the model can be scored based on how close a predition is to a threshold of .5 

#idea 3:
#there may be a replacement for cossine similarity:
#perhaps it is not properly matching similair people and similair movies 
#maybe there is a replacement function

#idea 4: 
#there should be more train and test users

#idea 5: (basic model)
#https://www.kaggle.com/code/muhammadayman/recommendation-system-using-cosine-similarity#Data-Cleaning



#adjusted cossine simlairity
#https://stackoverflow.com/questions/40716459/choice-between-an-adjusted-cosine-similarity-vs-regular-cosine-similarity
#https://github.com/csaluja/JupyterNotebooks-Medium/blob/master/CF%20Recommendation%20System-Examples.ipynb?source=post_page-----ecbffe1c20b1--------------------------------
#https://towardsdatascience.com/collaborative-filtering-based-recommendation-systems-exemplified-ecbffe1c20b1


#note: in the item-based collabortive filtering the means is implementaed item-wise
#this means with user-based collaboritve filtering the mean is implementad user-wise


#idea 1:
#use diferrent data structures...
#numpy arrays...
#https://www.geeksforgeeks.org/python-lists-vs-numpy-arrays/#
#https://stackoverflow.com/questions/29839350/numpy-append-vs-python-append
#https://www.geeksforgeeks.org/python-convert-list-to-python-array/


#idea 2:
#make use of both feature_2 and feature_3

#idea 3: would it be possible to convert many of the main dictionaries to lists or numpy arrays
#note: numpy arrays cant have variable number of items for a dimension
#but this can be over come by filling missing values
#this mean many matrices would be sparse
#there is also alot of appending to lists which is better for lists


#idea 4: would it be helpful to design my own data structures???

#idea 5: would it be helpful to have features like the average 10 closest in similairy and the 10 farthest in similarity???

#idea 6: before trying this there could be better data strcuture to use that would speed up the process



#now for the user comparison option (need user to list of movie ratings)
#fill in ratings that the user hasn't watched with the method above
#then cluster the users by their ratings

#note: agglomerative clustering might make more sense here since k-means has random init for centroids...
#note: to guess a new users rating requires that none of that users ratings have been used to train the model
#The data needs to be split into test and train before modeling the algorithm on the train data

#Training process:
#split data into test and train data
#proceed with train data...
#cluster movies by the tokens with range for k
#cluster users by the ratings with range for k and (fill in ratings for movies a users hasn't watched with some guess)
#guess: this can be obtained by clustering the movies that the user has watched...
#for each movie the user hasn't watched find the cluster that it belongs to with the highest possible k value
#that the user has at least one movie belonging to one of the clusters and then take the average of those movies
#this is exactly like a later training step excpet it is applied to all the movies the user watched

#for a single randomly chosen movie from each user in the trainging data...

#find the cluster the movie belongs to 
#find the movies part of that same cluster that the user has scored at the highest possible k value
#take the average score of these movies
#find the cluster the user belongs to
#find the average rating of the movie for users in that cluster at the highest possible k value
#train an mlp model with both averages and perhaps some extra statistics as features...
#using the given movie ratings as actuals


#The process of predicting a rating:
#1. find the cluster the movie belongs to 
#2. find the movies part of that same cluster that the user has scored at the highest possible k value
#3. take the average score of these movies
#4. find the cluster the user belongs to
#5. find the average rating of the movie for users in that cluster at the highest possible k value
#6. input into the trained mlp model both averages and perhaps some extra statistics
#7. make predictions and test against the randomly chosen movies actual ratings


#summary:
#find cluster for movie -> find movies part of the same clusters that the users rated -> average
#question: are the clusters unique to the movies the user has watched or to all movies???
#what is the technical difference???
#is this the same as finding the most simimlair movie the user rated and copying the rating???

#find cluster for user -> find the ratings for the movie by people in the same cluster -> average

#other avenues considered:
#idea 1:
#for the first process, instead of averaging the movies that only the user rated, find other users that are...
#like the user in question and find the average for that movie cluster
#Problem: it is better to get the users raw opionion rather than generalizing it to some like minded users
#there is an extra costly step to this
#idea 2: 
#for the second process, instead of finding the average rating for the movie in the same cluster of users...
#also find the average rating of movies that are like the movie in question 
#Problem, it is better to get the movies rating itself as it would be the most accurate indicator
#there is an extra costly step to this




#test with users related movies:
#is there a magic proportion of movies to average???
#note: this is taking around the same time as the above tests meaning 
#there could be more users to include in analysis with little increase in runtime
#k fold cross validation could be effective
#https://www.youtube.com/watch?v=TIgfjmp-4BA&ab_channel=Udacity

#effect of choosing a random seed...
#https://towardsdatascience.com/how-to-use-random-seeds-effectively-54a4cd855a79

#try tinkering with the number of similair movies to average


#analysis without feature scaling...
#feature scaling:
#https://analyticsindiamag.com/why-data-scaling-is-important-in-machine-learning-how-to-effectively-do-it/#:~:text=Scaling%20the%20target%20value%20is,learn%20and%20understand%20the%20problem.&text=Scaling%20of%20the%20data%20comes,algorithms%20in%20the%20data%20set.
#https://towardsdatascience.com/collaborative-filtering-based-recommendation-systems-exemplified-ecbffe1c20b1



#ideas:
#what if stopwords were included or the words have more or less filtering???
#for content based reccomendation, may need to focus on words from certain sections to not overwelm the model with useless information!!!
#k-means clusting can be effected by the random initialization...
#this is a reason that there is substantial variation in perfromance
#note: there are some predictions over 5 stars???
#idea: what about only focusing on movies with a specific number of ratings???
#what if there are more ratings per user???
#what if boolena values were used for content baed items instead of counts???



#what if there was a way to not limit content based filtering to movies a single user watched???

#even even even more (done):
#https://www.kaggle.com/code/cast42/simple-svd-movie-recommender

#even even more svd:
#https://analyticsindiamag.com/singular-value-decomposition-svd-application-recommender-system/

#even more svd:
#https://towardsdatascience.com/beginners-guide-to-creating-an-svd-recommender-system-1fd7326d1f65

#more svd:
#https://machinelearningmastery.com/using-singular-value-decomposition-to-build-a-recommender-system/

#even even more content base recomendations:
#https://www.kaggle.com/code/ibtesama/getting-started-with-a-movie-recommendation-system

#even more content base recomendations:
#https://towardsdatascience.com/the-4-recommendation-engines-that-can-predict-your-movie-tastes-109dc4e10c52

#more content based reccomendation:
#https://medium.com/web-mining-is688-spring-2021/content-based-movie-recommendation-system-72f122641eab#:~:text=Content%20Based%20Recommendation%20System%3A%20It,a%20show%20similar%20to%20it.

#content based reccomendation:
#https://medium.com/geekculture/creating-content-based-movie-recommender-with-python-7f7d1b739c63

#methods used to guess ratings
#https://web.eecs.umich.edu/~cscott/past_courses/eecs545f11/projects/AsendorfMcgaffinPressSchwartz.pdf

#svd...
#https://www.youtube.com/watch?v=8wLKuscyO9I&ab_channel=SundogEducationwithFrankKane

#pca...
#https://www.youtube.com/watch?v=fkf4IBRSeEc&ab_channel=SteveBrunton

#eigenvalues...
#https://www.youtube.com/watch?v=OA6CkChbe0Q&ab_channel=AndrewMisseldine

#more pca:
#https://www.youtube.com/watch?v=TJdH6rPA-TI&ab_channel=Computerphile

#svd lecture:
#https://www.youtube.com/watch?v=rFemvJgXY7E&ab_channel=Tech4Trends

#svd with tf-idf
#https://www.kaggle.com/code/parnianmalekian/svd-and-its-application-in-tf-idf


# LOOK: how to comment and docstring???:
# https://www.askpython.com/python/python-comments



extra questions from readme:
-Questions !!!
-would it be smart to try to guess users rating when they have a small number of ratings???
-but still using data for users with alot more ratings???
-this can be theoreticaly be explained but not necesarliy acted upon!!!

-is the movie rating for the movie to predict averaged out (yes)
-is the mean the complete average from train and test data for the svd on the full dataset (yes)
-are some movies listed twice in the ordered complete movie set (no: the sets are combined)

-how to remove the current user from this average???
[mean rating for the correspnding movie for every user who rated it in the train data]
answer: the user is already removed

-Is the rating of the target movies from other users included in this average???
no the rating does not include target ratings and if the the movie was only a traget movie then the overall average is used
